import arcade, math

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_TITLE = "Starting Template"
new_start_x = SCREEN_WIDTH/2
ball_speed = 10
ball_num = 0
ball_list = []
ball_radius = 5
block_radius = 24
round = 0
timer = 0


class Ball:
    def __init__(self, x, y, change_x, change_y):
        self.x = x
        self.y = y
        self.change_x = change_x
        self.change_y = change_y

    def draw(self):
        arcade.draw_circle_filled(self.x, self.y, ball_radius, arcade.color.WHITE)

    def update(self):
        global first_land, new_start_x
        self.x += self.change_x
        self.y += self.change_y
        if self.x < 200+ball_radius:
            self.x = 200+ball_radius
            self.change_x = -self.change_x
        elif self.x > 600-ball_radius:
            self.x = 600-ball_radius
            self.change_x = -self.change_x
        if self.y > 600-ball_radius:
            self.y = 600-ball_radius
            self.change_y = -self.change_y
        elif self.y < ball_radius:
            if first_land:
                new_start_x = self.x
                first_land = False
            ball_list.remove(self)

class Block:
    def __init__(self, x ,y):
        self.x = x
        self.y = y

    def draw(self):
        arcade.draw_lrtb_rectangle_outline(self.x-block_radius, self.x+block_radius, self.y+block_radius, self.y+block_radius)


def new_round():
    global round, first_land, ball_num, ball_launched, ball_start_x, new_start_x, round_start, change_x, change_y
    change_x, change_y = 0, 0
    ball_launched = 0
    ball_start_x = new_start_x
    round += 1
    ball_num += 1
    first_land = True
    round_start = False


def draw_board():
    arcade.draw_text(f"Round:{round} \nBall:{ball_num} \n{first_land} \n{round_start} \n{ball_launched}", 20, SCREEN_HEIGHT-40, arcade.color.WHITE, 20)

class MyGame(arcade.Window):
    """
    Main application class.

    NOTE: Go ahead and delete the methods you don't need.
    If you do need a method, delete the 'pass' and replace it
    with your own code. Don't leave 'pass' in this program.
    """

    def __init__(self, width, height, title):
        super().__init__(width, height, title)

        arcade.set_background_color(arcade.color.GRAY)

        # If you have sprite lists, you should create them here,
        # and set them to None

    def setup(self):
        # Create your sprites and sprite lists here
        if True:
            new_round()

    def on_draw(self):
        """
        Render the screen.
        """

        # This command should happen before we start drawing. It will clear
        # the screen to the background color, and erase what we drew last frame.
        arcade.start_render()
        arcade.draw_xywh_rectangle_filled(200, 0, 400, SCREEN_HEIGHT, arcade.color.BLACK)
        for item in ball_list:
            item.draw()
        draw_board()
        if not round_start:
            arcade.draw_circle_filled(ball_start_x, ball_radius, ball_radius, arcade.color.WHITE)
        # Call draw() on all your sprite lists below

    def update(self, delta_time):
        """
        All the logic to move, and the game logic goes here.
        Normally, you'll call update() on the sprite lists that
        need it.
        """
        global timer, ball_launched
        if timer % 10 == 0 and ball_launched < ball_num and round_start:
            ball_list.append(Ball(ball_start_x, ball_radius, change_x, change_y))
            ball_launched += 1
        if len(ball_list) == 0 and round_start:
            new_round()
        for item in ball_list:
            item.update()
        timer += 1



    def on_key_press(self, key, key_modifiers):
        """
        Called whenever a key on the keyboard is pressed.

        For a full list of keys, see:
        http://arcade.academy/arcade.key.html
        """
        pass


    def on_key_release(self, key, key_modifiers):
        """
        Called whenever the user lets off a previously pressed key.
        """
        pass

    def on_mouse_motion(self, x, y, delta_x, delta_y):
        """
        Called whenever the mouse moves.
        """
        global change_x, change_y, loc_got
        if not round_start:
            ang_x = (x - ball_start_x)
            ang_y = y
            ang = math.atan(ang_x/ang_y)
            change_x = math.sin(ang)*ball_speed
            change_y = math.cos(ang)*ball_speed
            loc_got = True
            print(ang_x, ang_y, ang)


    def on_mouse_press(self, x, y, button, key_modifiers):
        """
        Called when the user presses a mouse button.
        """
        global round_start, timer, loc_got
        if not round_start and loc_got:
            for item in ball_list:
                item.change_x = change_x
                item.change_y = change_y
            print(change_x, change_y)
            round_start = True
            loc_got = False
            timer = 0

    def on_mouse_release(self, x, y, button, key_modifiers):
        """
        Called when a user releases a mouse button.
        """
        pass


def main():
    """ Main method """
    game = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    game.setup()
    arcade.run()


if __name__ == "__main__":
    main()
