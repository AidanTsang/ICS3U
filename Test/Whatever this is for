import arcade
import math
import random
import time

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_TITLE = "Starting Template"
new_start_x = SCREEN_WIDTH/2
ball_speed = 10
ball_num = 1
ball_list = []
ball_radius = 5
block_list = []
block_radius = 24
powerup_list = []
powerup_radius = 8
round = 0
timer = 0
fps = 0
old_time = time.time()
fps_count = 0
change_x = 0
change_y = 0
gameover = False



class Ball:
    def __init__(self, x, y, change_x, change_y):
        self.x = x
        self.y = y
        self.change_x = change_x
        self.change_y = change_y

    def draw(self):
        arcade.draw_circle_filled(self.x, self.y, ball_radius, arcade.color.WHITE)

    def update(self):
        self.x += self.change_x
        self.y += self.change_y
        self.land()
        self.collide_wall()
        self.collide_block()
        self.collide_powerup()

    def collide_wall(self):
        if self.x-ball_radius < 200:
            self.y = self.y-(200-(self.x-ball_radius))/self.change_x*self.change_y
            self.x = 200+ball_radius
            self.change_x = -self.change_x
        elif self.x+ball_radius > 600:
            self.y = self.y-((self.x+ball_radius)-600)/self.change_x*self.change_y
            self.x = 600-ball_radius
            self.change_x = -self.change_x
        if self.y > 600-ball_radius:
            self.x = self.x-((self.y+ball_radius)-600)/self.change_y*self.change_x
            self.y = 600-ball_radius
            self.change_y = -self.change_y

    def land(self):
        global first_land, new_start_x
        if self.y < ball_radius:
            if first_land:
                new_start_x = self.x
                first_land = False
            ball_list.remove(self)

    def collide_block(self):
        for block in block_list:
            if self.x+ball_radius > block.x-block_radius and self.x-ball_radius < block.x+block_radius and self.y-ball_radius < block.y+block_radius and self.y+ball_radius > block.y-block_radius:
                if (self.x+ball_radius)-(block.x-block_radius) < abs(self.change_x) and self.change_x > 0:
                    self.y = self.y - ((self.x+ball_radius)-(block.x-block_radius)) / self.change_x * self.change_y
                    self.x = block.x-block_radius-ball_radius
                    self.change_x = -self.change_x
                elif (block.x+block_radius)-(self.x-ball_radius) < abs(self.change_x) and self.change_x < 0:
                    self.y = self.y - ((block.x+block_radius)-(self.x-ball_radius)) / self.change_x * self.change_y
                    self.x = block.x+block_radius+ball_radius
                    self.change_x = -self.change_x
                if (self.y+ball_radius)-(block.y-block_radius) < abs(self.change_y) and self.change_y > 0:
                    self.x = self.x - ((self.y+ball_radius)-(block.y-block_radius)) / self.change_y * self.change_x
                    self.y = block.y-block_radius-ball_radius
                    self.change_y = -self.change_y
                elif (block.y+block_radius)-(self.y-ball_radius) < abs(self.change_y) and self.change_y < 0:
                    self.x = self.x - ((block.y+block_radius)-(self.y-ball_radius)) / self.change_y * self.change_x
                    self.y = block.y+block_radius+ball_radius
                    self.change_y = -self.change_y
                block.update()

    def collide_powerup(self):
        for item in powerup_list:
            if math.sqrt((self.x-item.x)**2+(self.y-item.y)**2) <= powerup_radius+ball_radius:
                item.update()



class Block:
    def __init__(self, x ,start_round, hp):
        self.x = x
        self.start_round = start_round
        self.hp = hp

    def draw(self):
        arcade.draw_lrtb_rectangle_outline(self.x-block_radius, self.x+block_radius, self.y+block_radius, self.y-block_radius, arcade.color.YELLOW)
        arcade.draw_text(f"{self.hp}", self.x-len(str(self.hp))*5, self.y-5, arcade.color.YELLOW)

    def update(self):
        self.hp -= 1
        if self.hp <= 0:
            block_list.remove(self)

    def new_round(self):
        self.y = SCREEN_HEIGHT - 50 - (round - self.start_round) * 54

class PowerUp:
    def __init__(self, x, start_round, type):
        self.x = x
        self.start_round = start_round
        self.type = type

    def draw(self):
        arcade.draw_circle_outline(self.x, self.y, powerup_radius, arcade.color.ORANGE, 2)
        arcade.draw_line(self.x, self.y+4, self.x, self.y-4, arcade.color.ORANGE, 2)
        arcade.draw_line(self.x+4, self.y, self.x-4, self.y, arcade.color.ORANGE, 2)

    def update(self):
        global ball_num
        ball_num += 1
        powerup_list.remove(self)

    def new_round(self):
        self.y = SCREEN_HEIGHT - 50 - (round - self.start_round) * 54

def new_round():
    global round, first_land, ball_launched, ball_start_x, round_start, all_launched
    ball_launched = 0
    ball_start_x = new_start_x
    round += 1
    first_land = True
    round_start = False
    all_launched = False
    get_new_roll()
    roll_fall()


def draw_board():
    arcade.draw_text(f"Round:{round} \nBall:{ball_num} \nLaunch:{ball_launched} \nScreen:{len(ball_list)}", 20, SCREEN_HEIGHT-80, arcade.color.WHITE, 20)
    arcade.draw_text(f"{fps}", SCREEN_WIDTH-50, SCREEN_HEIGHT-40, arcade.color.WHITE, 20)

def roll_fall():
    global gameover
    for item in block_list:
        if round - item.start_round >= 9:
            gameover = True
        item.new_round()
    for item in powerup_list:
        item.new_round()

def get_new_roll():
    global block_list
    exball_loc = random.randrange(7)
    powerup_list.append(PowerUp(54*exball_loc+236, round, None))
    for i in range(7):
        if i != exball_loc:
            rand = random.randrange(20)
            if rand >= 11:
                block_list.append(Block(54*i + 236, round, round))
            elif rand == 10:
                block_list.append(Block(54 * i + 236, round, round*2))


def check_sec():
    global fps_count, old_time, fps
    new_time = time.time()
    if new_time - old_time >= 1:
        fps = fps_count
        fps_count = 0
        old_time = new_time

class MyGame(arcade.Window):
    """
    Main application class.

    NOTE: Go ahead and delete the methods you don't need.
    If you do need a method, delete the 'pass' and replace it
    with your own code. Don't leave 'pass' in this program.
    """

    def __init__(self, width, height, title):
        super().__init__(width, height, title)

        arcade.set_background_color(arcade.color.GRAY)

        # If you have sprite lists, you should create them here,
        # and set them to None

    def setup(self):
        # Create your sprites and sprite lists here
        if True:
            new_round()

    def on_draw(self):
        """
        Render the screen.
        """

        # This command should happen before we start drawing. It will clear
        # the screen to the background color, and erase what we drew last frame.
        arcade.start_render()
        arcade.draw_xywh_rectangle_filled(200, 0, 400, SCREEN_HEIGHT, arcade.color.BLACK)
        for item in ball_list:
            item.draw()
        for item in block_list:
            item.draw()
        for item in powerup_list:
            item.draw()
        draw_board()
        if not round_start:
            arcade.draw_circle_filled(ball_start_x, ball_radius, ball_radius, arcade.color.WHITE)
        elif not first_land:
            arcade.draw_circle_filled(new_start_x, ball_radius, ball_radius, arcade.color.WHITE)
        if not round_start:
            arcade.draw_line(ball_start_x, ball_radius, ball_start_x+change_x/ball_speed*40, ball_radius+change_y/ball_speed*40, arcade.color.WHITE)
        if gameover:
            arcade.draw_text("GAMEOVER", 300, 350, arcade.color.WHITE, 50)
        # Call draw() on all your sprite lists below

    def update(self, delta_time):
        """
        All the logic to move, and the game logic goes here.
        Normally, you'll call update() on the sprite lists that
        need it.
        """
        global timer, ball_launched, fps_count, all_launched
        if not gameover:
            if timer % 5 == 0 and round_start and not all_launched:
                ball_list.append(Ball(ball_start_x, ball_radius, change_x, change_y))
                ball_launched += 1
            if ball_launched == ball_num:
                all_launched = True
            for item in ball_list:
                item.update()
            if len(ball_list) == 0:
                for item in ball_list:
                    ball_list.remove(item)
                if round_start:
                    new_round()


            timer += 1
            fps_count += 1
            check_sec()



    def on_key_press(self, key, key_modifiers):
        """
        Called whenever a key on the keyboard is pressed.

        For a full list of keys, see:
        http://arcade.academy/arcade.key.html
        """
        if key == arcade.key.UP:
            for item in ball_list:
                item.x += 10



    def on_key_release(self, key, key_modifiers):
        """
        Called whenever the user lets off a previously pressed key.
        """
        pass

    def on_mouse_motion(self, x, y, delta_x, delta_y):
        """
        Called whenever the mouse moves.
        """
        global change_x, change_y, loc_got
        if not round_start:
            ang_x = (x - ball_start_x)
            ang_y = y
            ang = math.atan(ang_x/ang_y)
            if ang >= 1.39626:
                ang = 1.39626
            elif ang <= -1.39626:
                ang = -1.39626
            change_x = math.sin(ang)*ball_speed
            change_y = math.cos(ang)*ball_speed
            loc_got = True



    def on_mouse_press(self, x, y, button, key_modifiers):
        """
        Called when the user presses a mouse button.
        """
        global round_start, timer, loc_got, all_lannched
        if not round_start and loc_got:
            round_start = True
            loc_got = False
            timer = 0

    def on_mouse_release(self, x, y, button, key_modifiers):
        """
        Called when a user releases a mouse button.
        """
        pass


def main():
    """ Main method """
    game = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    game.setup()
    arcade.run()


if __name__ == "__main__":
    main()
