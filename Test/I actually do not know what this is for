import random

class Player():
    def __init__(self, name):
        self.name = name
        self.cash = 1500
        self.loc = 0
        self.owned = []
        self.in_jail = False
        self.double_count = 0
        self.train = 0
        self.utility = 0
        self.end_turn = False
        self.mortgaged = []
        self.game_over = False

    def move(self):
        self.roll_1 = random.randrange(1, 7)
        self.roll_2 = random.randrange(1, 7)
        if self.roll_1 == self.roll_2:
            self.double_count += 1
        self.exit_jail()
        if self.in_jail:
            self.jail_turn -= 1
            print(f"Dice 1: {self.roll_1}, Dice 2: {self.roll_2}, Location: {self.loc}, Cash: {self.cash}")
        elif self.double_count == 3:
            self.check_jail()
            print(f"Dice 1: {self.roll_1}, Dice 2: {self.roll_2}, Location: {self.loc}, Cash: {self.cash}")
        else:
            self.loc += self.roll_1 + self.roll_2
            self.pass_go()
            print(f"Dice 1: {self.roll_1}, Dice 2: {self.roll_2}, Location: {self.loc}, Cash: {self.cash}")
            self.check_board()
            self.check_bal()
            if self.roll_1 == self.roll_2 and not self.game_over:
                self.process_event()
        self.double_count = 0
        self.end_turn = True

    def pass_go(self):
        if self.loc > 39:
            print("Gained $200 from passing go.")
            self.loc -= 39
            self.cash += 200

    def check_board(self):
        if isinstance(board[self.loc], Property):
            self.property()
        elif board[self.loc] == "Jail":
            self.check_jail()
        elif board[self.loc] == "Income Tax":
            self.cash -= 200
            print(f"You paid $200 for income tax, ${self.cash} left.")
        elif board[self.loc] == "Luxury Tax":
            self.cash -= 100
            print(f"You paid $100 for luxury tax, ${self.cash} left.")

    def check_jail(self):
        if not self.in_jail:
            print("You are in jail.")
            self.loc = 10
            self.jail_turn = 2
            self.in_jail = True
            self.end_turn = True

    def exit_jail(self):
        if self.in_jail:
            if self.cash >= 50:
                if input("Enter 'Y' to pay $50 to exit jail.").upper() == "Y":
                    self.cash -= 50
                    print("You paid $50 to exit jail.")
                    self.in_jail = False
            elif self.roll_1 == self.roll_2:
                print("You exited jail with a double.")
                self.in_jail = False
            elif self.jail_turn == 0:
                print("You are forced to paid $50 to exit.")
                self.cash -= 50
                self.in_jail = False

    def property(self):
        if board[self.loc] not in self.owned and not board[self.loc].bought:
            board[self.loc].buy(self)
        elif board[self.loc] not in self.owned and board[self.loc].bought:
            board[self.loc].payment(self)
        elif board[self.loc] in self.owned:
            print("You landed on your own property.")

    def check_bal(self):
        global game_over
        while self.cash < 0:
            print("You have a negative balance, please fix it.")
            if self.cash < 0 and len(self.owned) == 0:
                self.game_over = True
                self.lose()
                break
            self.user_in()

    def user_in(self):
        while True:
            self.user_input = input("\n[M]: to manage properties' mortgage \n[B]: to manage properties' buildings \n[R]: to return \n").upper()
            if self.user_input == "R":
                break
            elif self.user_input == "M":
                self.user_mortgage()
            elif self.user_input == "B":
                self.user_building()

    def user_mortgage(self):
        while True:
            self.user_input = input("\n[L]: to check list of mortgaged property \n[A]: to check list of property available to mortgage \n[M]: to mortgage your property \n[P]: to repay mortgage \n[R]: to return \n").upper()
            if self.user_input == "R":
                break
            elif self.user_input == "L":
                if len(self.mortgaged) == 0:
                    print("None of your properties mortgaged currently.")
                else:
                    print("Currently mortgaged:", end=" ")
                    for i in self.mortgaged:
                        print(f"{i.name}[{i.loc}]", end=", ")
                    print("")
            elif self.user_input == "A":
                if len(self.owned) == 0:
                    print("You do not have any properties that is available to mortgage.")
                else:
                    print("Currently available to mortgage:", end=" ")
                    for i in self.owned:
                        print(f"{i.name}[{i.loc}]", end=", ")
                    print("")
            elif self.user_input == "M":
                print("Enter the location of the property you want to mortgage")
                try:
                    self.temp_input = int(input())
                except ValueError:
                    print("Invalid input, please enter the location of the property on the board (0-39).")
                else:
                    if board[self.temp_input] in self.owned:
                        board[self.temp_input].mortgage()
                    elif isinstance(board[self.temp_input], Property):
                        print("This property is not available for you to mortgage.")
                    else:
                        print("This location is not a property.")
            elif self.user_input == "P":
                print("Enter the location of the property you want to pay back the mortgage.")
                try:
                    self.temp_input = int(input())
                except ValueError:
                    print("Invalid input, please enter the location of the property on the board (0-39).")
                else:
                    if board[self.temp_input] in self.mortgaged:
                        board[self.temp_input].pay_mortgage()
                    elif isinstance(board[self.temp_input], Property):
                        print("This property is not currently mortgaged or it is not owned by you.")
                    else:
                        print("This location is not a property.")

    def user_building(self):
        while True:
            self.user_input = input("\n[L]: to check your properties buildings. \n[A]: to check properties available to build buildings \n[B]: to build buildings on properties \n[S]: to sell buildings on properties \n[R]: to return \n").upper()
            if self.user_input == "R":
                break
            elif self.user_input == "L":
                for i in self.owned:
                    if i.building <= 4:
                        print(f"{i.name}[{i.loc}]: {i.building} houses", end= ",  ")
                    else:
                        print(f"{i.name}[{i.loc}]: 1 hotel", end=",  ")
                print("")
            elif self.user_input == "A":
                self.full_set_count = 0
                for i in self.owned:
                    if type(i) == Property:
                        if i.full_set == True and i in self.owned:
                            print(f"{i.name}[{i.loc}] set:({i.set})", end=",  ")
                            self.full_set_count += 1
                if self.full_set_count == 0:
                    print("There is no properties available to build buildings", end="")
                print("")
            elif self.user_input == "B":
                print("Enter the location of the property you want to build buildings")
                try:
                    self.temp_input = int(input())
                except ValueError:
                    print("Invalid input, please enter the location of the property on the board (0-39).")
                else:
                    board[self.temp_input].buy_building()
            elif self.user_input == "S":
                print("Enter the location of the property you want to build buildings")
                try:
                    self.temp_input = int(input())
                except ValueError:
                    print("Invalid input, please enter the location of the property on the board (0-39).")
                else:
                    board[self.temp_input].sell_building()

    def process_event(self):
        while not self.end_turn:
            self.user_input = input("Enter: to roll dices")
            if self.user_input == "":
                self.move()
            elif self.user_input.upper() == "I":
                self.user_in()

    def lose(self):
        self.game_over = True
        for i in self.owned:
            i.bought = False
            i.mortgaged = False
            self.owned.remove(i)
        for i in self.mortgaged:
            i.bought = False
            i.mortgaged = False
            self.mortgaged.remove(i)
        players.remove(self)

class Property():
    def __init__(self, name, cost, location, rent):
        self.name = name
        self.cost = cost
        self.loc = location
        self.rent = rent
        self.building = 0
        self.bought = False
        self.mortgaged = False
        if type(self) == Property:
            self.set = self.loc//5
            self.full_set = False

    def buy(self, player):
        if not self.bought and player.cash >= self.cost:
            self.temp_input = input(f"You landed on an unbought property - {self.name}. \nEnter 'B' to buy this property.").upper()
            if self.temp_input == "B":
                self.bought = True
                self.owner = player
                player.cash -= self.cost
                player.owned.append(self)
                print(f"You bought {self.name} for ${self.cost}, ${player.cash} left.")
                if type(self) == Property:
                    self.check_set()
                elif type(self) == Train:
                    player.train += 1
                elif type(self) == Utility:
                    player.utility += 1
            elif self.temp_input == "I":
                player.user_in()
                self.buy(player)

        elif player.cash < self.cost:
            print(f"You do not have enough money to afford this unbought property - {self.name}(${self.cost}). \nEnter 'I' to open user interface.")
            if input().upper() == "I":
                player.user_in()
                self.buy(player)

    def payment(self, player):
        if self.full_set and self.building == 0:
            player.cash -= 2*self.rent[0]
            self.owner.cash += 2*self.rent[0]
            print(f"You paid Player{self.owner.name} ${2*self.rent[0]} for the rent of {self.name}, ${player.cash} left.")
        else:
            player.cash -= self.rent[self.building]
            self.owner.cash += self.rent[self.building]
            print(f"You paid Player{self.owner.name} ${self.rent[self.building]} for the rent of {self.name}, ${player.cash} left.")

    def check_set(self):
        for i in property_list[self.set]:
            if i not in self.owner.owned:
                self.full_set = False
                break
        else:
            for i in property_list[self.set]:
                i.full_set = True

    def mortgage(self):
        if not self.mortgaged and self.building == 0:
            self.owner.cash += self.cost/2
            self.mortgaged = True
            self.owner.owned.remove(self)
            self.owner.mortgaged.append(self)
            if type(self) == Train:
                self.owner.train -= 1
            elif type(self) == Utility:
                self.owner.utility -= 1
            print(f"You mortgaged {self.name} and gained ${self.cost/2}. You have ${self.owner.cash} now.")
        elif self.building > 0:
            print(f"You need to sell the buildings at {self.name} before you can mortgage it.")

    def pay_mortgage(self):
        if self.mortgaged and self.owner.cash >= int(self.cost/2*1.1):
            self.owner.cash -= int(self.cost/2*1.1)
            self.mortgaged = False
            self.owner.mortgaged.remove(self)
            self.owner.owned.append(self)
            if type(self) == Train:
                self.owner.train += 1
            elif type(self) == Utility:
                self.owner.utility += 1
            print(f"You paid off your mortgage for {self.name} with ${int(self.cost/2*1.1)}. You have ${self.owner.cash} left")

    def buy_building(self):
        if type(self) == Property and self.full_set and self.building < 5:
            self.owner.cash -= (self.loc//10+1)*50
            self.building += 1
            print(f"You spent ${(self.loc//10+1)*50} to buy a building at {self.name}")
        elif self.building == 5:
            print(f"You have already reach the maximum building for {self.name}")
        elif not self.full_set:
            print("A full set is required to buy buildings")
        elif type(self) != Property:
            print("Train stations or utilities is not available to build buildings")

    def sell_building(self):
        if self.building > 0:
            self.owner.cash += (self.loc//10+1)*25
            self.building -= 1
            print(f"You gained {(self.loc//10+1)*25} from selling a building at {self.name}")
        elif self.building == 0:
            print(f"There is no buildings on {self.name}")


class Train(Property):
    def payment(self, player):
        player.cash -= self.rent*(2**(self.owner.train-1))
        self.owner.cash += self.rent*(2**(self.owner.train-1))
        print(f"You paid Player{self.owner.name} ${self.rent*(2**(self.owner.train-1))} for travelling with {self.name}, ${player.cash} left.")


class Utility(Property):
    def payment(self, player):
        player.cash -= (self.roll_1 + self.roll_2)*(6*self.utility-2)
        self.owner.cash += (self.roll_1 + self.roll_2)*(6*self.utility-2)
        print(f"You paid Player{self.owner.name} ${(self.roll_1 + self.roll_2)*(6*self.utility-2)} for the expense of {self.name}, ${player.cash} left.")


def set_up():
    global board, player_num, players, property_list, game_over
    board = [0 for i in range(40)]
    board[0] = "Go"
    board[30] = "Jail"
    board[4] = "Income Tax"
    board[38] = "Luxury Tax"

    player_num = int(input("Enter Player number: "))
    players = []
    for i in range(player_num):
        players.append(Player(i+1))

    Brown = [Property("Brown1", 60, 1, [2, 10, 30, 90, 160, 250]), Property("Brown2", 60, 3, [4, 20, 60, 180, 320, 450])]
    LightBlue = [Property("LightBlue1", 100, 6, [6, 30, 90, 270, 400, 550]), Property("LightBlue2", 100, 8, [6, 30, 90, 270, 400, 550]), Property("LightBlue3", 120, 9, [8, 40, 100, 300, 450, 600])]
    Violet = [Property("Violet1", 140, 11, [10, 50, 150, 450, 625, 750]), Property("Violet2", 140, 13, [10, 50, 150, 450, 625, 750]), Property("Violet3", 160, 14, [12, 60, 180, 500, 700, 900])]
    Orange = [Property("Orange1", 180, 16, [14, 70, 200, 550, 750, 950]), Property("Orange2", 180, 18, [14, 70, 200, 550, 750, 950]), Property("Orange3", 200, 19, [16, 80, 220, 600, 800, 1000])]
    Red = [Property("Red1", 220, 21, [18, 90, 250, 700, 875, 1050]), Property("Red2", 220, 23, [18, 90, 250, 700, 875, 1050]), Property("Red3", 240, 24, [20, 100, 300, 750, 925, 1100])]
    Yellow = [Property("Yellow1", 260, 26, [22, 110, 330, 800, 975, 1150]), Property("Yellow2", 260, 27, [22, 110, 330, 800, 975, 1150]), Property("Yellow3", 280, 29, [24, 120, 360, 850, 1025, 1200])]
    DarkGreen = [Property("DarkGreen1", 300, 31, [26, 130, 390, 900, 1100, 1275]), Property("DarkGreen2", 300, 32, [26, 130, 390, 900, 1100, 1275]), Property("DarkGreen3", 320, 34, [28, 150, 450, 1000, 1200, 1400])]
    DarkBlue = [Property("DarkBlue1", 350, 37, [35, 175, 500, 1100, 1300, 1500]), Property("DarkBlue2", 400, 39, [50, 200, 600, 1400, 1700, 2000])]
    Trains = [Train("Train1", 200, 5, 25), Train("Train2", 200, 15, 25), Train("Train3", 200, 25, 25), Train("Train4", 200, 35, 25)]
    Utilities = [Utility("Electricity", 150, 12, 0), Utility("Water", 150, 28, 0)]
    property_list = [Brown, LightBlue, Violet, Orange, Red, Yellow, DarkGreen, DarkBlue, Trains, Utilities]
    for set in property_list:
        for i in set:
            board[i.loc] = i

    game_over = False

set_up()
while not game_over:
    for i in players:
        if len(players) == 1:
            print(f"Player{i.name} win!")
            game_over = True
            break
        if not i.game_over:
            print(f"\nPlayer{i.name}'s turn.")
            i.end_turn = False
            i.process_event()

